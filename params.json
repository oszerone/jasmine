{"name":"Jasmine","tagline":"jasmine2cn","body":"<!DOCTYPE html>\r\n<!-- saved from url=(0034)http://pivotal.github.com/jasmine/ -->\r\n<html>\r\n<head>\r\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n  <title>introduction-1.3.1.js</title>\r\n  <link href=\"./Jasmine_introduction-1.3.1.js.cn_files/css\" rel=\"stylesheet\" type=\"text/css\">\r\n  <link rel=\"stylesheet\" href=\"http://pivotal.github.com/jasmine/css/docco.css\">\r\n  <link rel=\"stylesheet\" href=\"http://pivotal.github.com/jasmine/css/jasmine_docco-1.3.1.css\">\r\n  <link rel=\"stylesheet\" href=\"http://pivotal.github.com/jasmine/lib/jasmine-1.3.1/jasmine.css\">\r\n  <script src=\"./Jasmine_introduction-1.3.1.js.cn_files/jasmine.js\"></script>\r\n  <script src=\"./Jasmine_introduction-1.3.1.js.cn_files/jasmine-html.js\"></script>\r\n  <!--- boot.js is required only for Jasmine 2.x --->\r\n  <script src=\"./Jasmine_introduction-1.3.1.js.cn_files/boot.js\"></script>\r\n  <script src=\"./Jasmine_introduction-1.3.1.js.cn_files/introduction-1.3.1.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"container\">\r\n  <div id=\"background\"></div>\r\n  <div class=\"banner\">\r\n    <a href=\"http://github.com/pivotal/jasmine\">\r\n      <img src=\"./Jasmine_introduction-1.3.1.js.cn_files/jasmine_logo.png\">\r\n    </a>\r\n    <span class=\"spacer\"></span>\r\n    <div class=\"powered\">\r\n      <span>版权</span>\r\n    </div>\r\n    <a href=\"http://pivotallabs.com/\" target=\"_blank\">\r\n      <img src=\"./Jasmine_introduction-1.3.1.js.cn_files/pivotal_logo.gif\">\r\n    </a>\r\n  </div>\r\n  <table cellspacing=\"0\" cellpadding=\"0\">\r\n    <thead>\r\n    <tr>\r\n      <th class=\"docs\">\r\n        <h1>入门简介-1.3.1.js</h1>\r\n      </th>\r\n      <th class=\"code\"></th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr id=\"section-1\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-1\">¶</a>\r\n        </div>\r\n        <p>Jasmine是测试JavaScript代码的一个行为驱动开发框架。它不依赖任何JavaScript框架。不需要DOM。而且它干净、简洁的语法可以让你很容易编写测试。</p>\r\n        <p>本指南针对Jasmine版本<span class=\"version\">1.3.1 修订本 1354556913</span></p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Suites:_&lt;code&gt;describe&lt;/code&gt;_Your_Tests\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Suites:_<code>describe</code>_Your_Tests\">¶</a>\r\n        </div>\r\n        <h2>规则集合: <code>describe</code> 你的测试</h2>\r\n\r\n<p>一个测试规则集合通过调用有两个参数（一个string，一个function）的全局Jasmine函数<code>describe</code>开始。string参数是规则集合的名称或者标题 - 通常说明下面的测试。function参数是实现了规则集合的代码块。</p>\r\n\r\n<h2>规则</h2>\r\n\r\n<p>规则通过调用全局Jasmine函数<code>it</code>来定义，像<code>describe</code>一样it也有一个string和function参数。string参数是规则的标题，function参数是规则或者测试。规则包括一个或多个测试代码执行后的状态预望（可以说是断言吧）</p>\r\n\r\n<p>预期在Jasmine中是true或者false的断言。规则中的所有预期都为true则是一个通过的规则。规则中有一个或者多个false的预期则为失败的规则。</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"A suite\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"contains spec with an expectation\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-It&amp;rsquo;s_Just_Functions\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-It&rsquo;s_Just_Functions\">¶</a>\r\n        </div>\r\n        <h3>它仅仅是一个函数</h3>\r\n\r\n<p>由于<code>describe</code>和<code>it</code>块是函数，所以它们可以包含实现测试所需要的任何可执行代码。JavaScript作用域规则也适用，所以在<code>describe</code>中声明的变量可以在规则集合中的任何<code>it</code>块中使用。</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"A suite is just a function\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"and so is a spec\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Expectations\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Expectations\">¶</a>\r\n        </div>\r\n        <h2>预期</h2>\r\n\r\n<p>预期通过给<code>expect</code>函数传递真实值参数来创建。它链式调用一个需要期望值参数的匹配程序。</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toBe' matcher compares with ===\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Matchers\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Matchers\">¶</a>\r\n        </div>\r\n        <h3>匹配程序</h3>\r\n\r\n<p>每一个匹配程序实现真实值和预期值的布尔比较功能。它负责报告预期的真或假结果给Jasmine，然后Jasmine将设置规则为通过或失败。</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"and has a positive case \"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-6\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-6\">¶</a>\r\n        </div>\r\n        <p>任何匹配程序都可以在<code>expect</code>调用匹配程序前链式调用一个<code>not</code>取得一个相反的断言。</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"and can have a negative case\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Included_Matchers\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Included_Matchers\">¶</a>\r\n        </div>\r\n        <h3>已包含的匹配程序</h3>\r\n\r\n<p>Jasmine有一组丰富的匹配程序。右边的预期和规则使用了已提供的所有匹配程序。</p>\r\n\r\n<p>当项目中需要调用没有提供的特殊断言时，我们也可以编写自定义匹配程序<a href=\"https://github.com/pivotal/jasmine/wiki/Matchers\">custom matchers</a></p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"Included matchers:\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toBe' matcher compares with ===\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toEqual' matcher\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n\r\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"works for simple literals and variables\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\r\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">);</span>\r\n    <span class=\"p\">});</span>\r\n\r\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"should work for objects\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n        <span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\r\n        <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"mi\">34</span>\r\n      <span class=\"p\">};</span>\r\n      <span class=\"kd\">var</span> <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n        <span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\r\n        <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"mi\">34</span>\r\n      <span class=\"p\">};</span>\r\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">);</span>\r\n    <span class=\"p\">});</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toMatch' matcher is for regular expressions\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s1\">'foo bar baz'</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toMatch</span><span class=\"p\">(</span><span class=\"sr\">/bar/</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toMatch</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toMatch</span><span class=\"p\">(</span><span class=\"sr\">/quux/</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toBeDefined' matcher compares against `undefined`\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"s1\">'foo'</span>\r\n    <span class=\"p\">};</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toBeDefined</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">bar</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeDefined</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The `toBeUndefined` matcher compares against `undefined`\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"s1\">'foo'</span>\r\n    <span class=\"p\">};</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeUndefined</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">bar</span><span class=\"p\">).</span><span class=\"nx\">toBeUndefined</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toBeNull' matcher compares against null\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">'foo'</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">).</span><span class=\"nx\">toBeNull</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nx\">toBeNull</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeNull</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toBeTruthy' matcher is for boolean casting testing\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">'foo'</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toBeFalsy' matcher is for boolean casting testing\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">'foo'</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nx\">toBeFalsy</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeFalsy</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toContain' matcher is for finding an item in an Array\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">];</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'quux'</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toBeLessThan' matcher is for mathematical comparisons\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.1415926</span><span class=\"p\">,</span> <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"mf\">2.78</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">).</span><span class=\"nx\">toBeLessThan</span><span class=\"p\">(</span><span class=\"nx\">pi</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">pi</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeLessThan</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toBeGreaterThan' is for mathematical comparisons\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.1415926</span><span class=\"p\">,</span> <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"mf\">2.78</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">pi</span><span class=\"p\">).</span><span class=\"nx\">toBeGreaterThan</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeGreaterThan</span><span class=\"p\">(</span><span class=\"nx\">pi</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toBeCloseTo' matcher is for precision math comparison\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.1415926</span><span class=\"p\">,</span> <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"mf\">2.78</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">pi</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeCloseTo</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">pi</span><span class=\"p\">).</span><span class=\"nx\">toBeCloseTo</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"The 'toThrow' matcher is for testing if a function throws an exception\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\r\n    <span class=\"p\">};</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\r\n    <span class=\"p\">};</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toThrow</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">).</span><span class=\"nx\">toThrow</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Grouping_Related_Specs_with_&lt;code&gt;describe&lt;/code&gt;\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Grouping_Related_Specs_with_<code>describe</code>\">¶</a>\r\n        </div>\r\n        <h2>使用<code>describe</code>分组相关联的规则</h2>\r\n\r\n<p>函数<code>describe</code>可以分组相关联的规则。string参数是这个规则集合的名称，它将连接规则名称作为一个规则的全称，这样方便在大量规则集合中查找规则。\r\n如果你的名称起的比较好，你的规则读起来像传统<a href=\"http://en.wikipedia.org/wiki/Behavior-driven_development\">BDD</a>风格的一整句话。</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"A spec\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"is just a function, so it can contain any code\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"can have more than one expectation\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Setup_and_Teardown\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Setup_and_Teardown\">¶</a>\r\n        </div>\r\n        <h3>Setup and Teardown</h3>\r\n\r\n<p>To help a test suite DRY up any duplicated setup and teardown code, Jasmine provides the global <code>beforeEach</code> and <code>afterEach</code> functions. As the name implies the <code>beforeEach</code> function is called once before each spec in the <code>describe</code> is run and the <code>afterEach</code> function is called once after each spec.</p>\r\n\r\n<p>Here is the same set of specs written a little differently. The variable under test is defined at the top-level scope — the <code>describe</code> block —  and initialization code is moved into a <code>beforeEach</code> function. The <code>afterEach</code> function resets the variable before continuing.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"A spec (with setup and tear-down)\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">foo</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">afterEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"is just a function, so it can contain any code\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"can have more than one expectation\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Nesting_&lt;code&gt;describe&lt;/code&gt;_Blocks\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Nesting_<code>describe</code>_Blocks\">¶</a>\r\n        </div>\r\n        <h3>Nesting <code>describe</code> Blocks</h3>\r\n\r\n<p>Calls to <code>describe</code> can be nested, with specs defined at any level. This allows a suite to be composed as a tree of functions. Before a spec is executed, Jasmine walks down the tree executing each <code>beforeEach</code> function in order. After the spec is executed, Jasmine walks through the <code>afterEach</code> functions similarly.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"A spec\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">foo</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">afterEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"is just a function, so it can contain any code\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"can have more than one expectation\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"nested inside a second describe\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">var</span> <span class=\"nx\">bar</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\r\n    <span class=\"p\">});</span>\r\n\r\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"can reference both scopes as needed \"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">);</span>\r\n    <span class=\"p\">});</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Disabling_Specs_and_Suites\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Disabling_Specs_and_Suites\">¶</a>\r\n        </div>\r\n        <h2>Disabling Specs and Suites</h2>\r\n\r\n<p>Suites and specs can be disabled with the <code>xdescribe</code> and <code>xit</code> functions, respectively. These suites and specs are skipped when run and thus their results will not appear in the results.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">xdescribe</span><span class=\"p\">(</span><span class=\"s2\">\"A spec\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">foo</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">xit</span><span class=\"p\">(</span><span class=\"s2\">\"is just a function, so it can contain any code\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Spies\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Spies\">¶</a>\r\n        </div>\r\n        <h2>Spies</h2>\r\n\r\n<p>Jasmine’s test doubles are called spies. A spy can stub any function and tracks calls to it and all arguments. There are special matchers for interacting with spies.</p>\r\n\r\n<p>The <code>toHaveBeenCalled</code> matcher will return true if the spy was called. The <code>toHaveBeenCalledWith</code> matcher will return true if the argument list matches any of the recorded calls to the spy.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"A spy\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">setBar</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n        <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\r\n      <span class=\"p\">}</span>\r\n    <span class=\"p\">};</span>\r\n\r\n    <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"s1\">'setBar'</span><span class=\"p\">);</span>\r\n\r\n    <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">(</span><span class=\"mi\">456</span><span class=\"p\">,</span> <span class=\"s1\">'another param'</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks that the spy was called\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks its number of calls\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">.</span><span class=\"nx\">calls</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks all the arguments of its calls\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalledWith</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalledWith</span><span class=\"p\">(</span><span class=\"mi\">456</span><span class=\"p\">,</span> <span class=\"s1\">'another param'</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"allows access to the most recent call\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">.</span><span class=\"nx\">mostRecentCall</span><span class=\"p\">.</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">456</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"allows access to other calls\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">.</span><span class=\"nx\">calls</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"stops all execution on a function\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">).</span><span class=\"nx\">toBeNull</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Spies:_&lt;code&gt;andCallThrough&lt;/code&gt;\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Spies:_<code>andCallThrough</code>\">¶</a>\r\n        </div>\r\n        <h3>Spies: <code>andCallThrough</code></h3>\r\n\r\n<p>By chaining the spy with <code>andCallThrough</code>, the spy will still track all calls to it but in addition it will delegate to the actual implementation.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"A spy, when configured to call through\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"p\">,</span> <span class=\"nx\">fetchedBar</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">setBar</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n        <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\r\n      <span class=\"p\">},</span>\r\n      <span class=\"nx\">getBar</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n        <span class=\"k\">return</span> <span class=\"nx\">bar</span><span class=\"p\">;</span>\r\n      <span class=\"p\">}</span>\r\n    <span class=\"p\">};</span>\r\n\r\n    <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"s1\">'getBar'</span><span class=\"p\">).</span><span class=\"nx\">andCallThrough</span><span class=\"p\">();</span>\r\n\r\n    <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">fetchedBar</span> <span class=\"o\">=</span> <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">getBar</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks that the spy was called\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">getBar</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"should not effect other functions\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"when called returns the requested value\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">fetchedBar</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Spies:_&lt;code&gt;andReturn&lt;/code&gt;\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Spies:_<code>andReturn</code>\">¶</a>\r\n        </div>\r\n        <h3>Spies: <code>andReturn</code></h3>\r\n\r\n<p>By chaining the spy with <code>andReturn</code>, all calls to the function will return a specific value.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"A spy, when faking a return value\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"p\">,</span> <span class=\"nx\">fetchedBar</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">setBar</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n        <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\r\n      <span class=\"p\">},</span>\r\n      <span class=\"nx\">getBar</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n        <span class=\"k\">return</span> <span class=\"nx\">bar</span><span class=\"p\">;</span>\r\n      <span class=\"p\">}</span>\r\n    <span class=\"p\">};</span>\r\n\r\n    <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"s1\">'getBar'</span><span class=\"p\">).</span><span class=\"nx\">andReturn</span><span class=\"p\">(</span><span class=\"mi\">745</span><span class=\"p\">);</span>\r\n\r\n    <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">fetchedBar</span> <span class=\"o\">=</span> <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">getBar</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks that the spy was called\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">getBar</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"should not effect other functions\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"when called returns the requested value\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">fetchedBar</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">745</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Spies:_&lt;code&gt;andCallFake&lt;/code&gt;\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Spies:_<code>andCallFake</code>\">¶</a>\r\n        </div>\r\n        <h3>Spies: <code>andCallFake</code></h3>\r\n\r\n<p>By chaining the spy with <code>andCallFake</code>, all calls to the spy will delegate to the supplied function.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"A spy, when faking a return value\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"p\">,</span> <span class=\"nx\">fetchedBar</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">setBar</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n        <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\r\n      <span class=\"p\">},</span>\r\n      <span class=\"nx\">getBar</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n        <span class=\"k\">return</span> <span class=\"nx\">bar</span><span class=\"p\">;</span>\r\n      <span class=\"p\">}</span>\r\n    <span class=\"p\">};</span>\r\n\r\n    <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"s1\">'getBar'</span><span class=\"p\">).</span><span class=\"nx\">andCallFake</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"k\">return</span> <span class=\"mi\">1001</span><span class=\"p\">;</span>\r\n    <span class=\"p\">});</span>\r\n\r\n    <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">setBar</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">fetchedBar</span> <span class=\"o\">=</span> <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">getBar</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks that the spy was called\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">getBar</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"should not effect other functions\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"when called returns the requested value\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">fetchedBar</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Spies:_&lt;code&gt;createSpy&lt;/code&gt;\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Spies:_<code>createSpy</code>\">¶</a>\r\n        </div>\r\n        <h3>Spies: <code>createSpy</code></h3>\r\n\r\n<p>When there is not a function to spy on, <code>jasmine.createSpy</code> can create a “bare” spy. This spy acts as any other spy – tracking calls, arguments, etc. But there is no implementation behind it. Spies are JavaScript objects and can be used as such.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"A spy, when created manually\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">whatAmI</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">whatAmI</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">createSpy</span><span class=\"p\">(</span><span class=\"s1\">'whatAmI'</span><span class=\"p\">);</span>\r\n\r\n    <span class=\"nx\">whatAmI</span><span class=\"p\">(</span><span class=\"s2\">\"I\"</span><span class=\"p\">,</span> <span class=\"s2\">\"am\"</span><span class=\"p\">,</span> <span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spy\"</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"is named, which helps in error reporting\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">whatAmI</span><span class=\"p\">.</span><span class=\"nx\">identity</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'whatAmI'</span><span class=\"p\">)</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks that the spy was called\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">whatAmI</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks its number of calls\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">whatAmI</span><span class=\"p\">.</span><span class=\"nx\">calls</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks all the arguments of its calls\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">whatAmI</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalledWith</span><span class=\"p\">(</span><span class=\"s2\">\"I\"</span><span class=\"p\">,</span> <span class=\"s2\">\"am\"</span><span class=\"p\">,</span> <span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spy\"</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"allows access to the most recent call\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">whatAmI</span><span class=\"p\">.</span><span class=\"nx\">mostRecentCall</span><span class=\"p\">.</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s2\">\"I\"</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Spies:_&lt;code&gt;createSpyObj&lt;/code&gt;\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Spies:_<code>createSpyObj</code>\">¶</a>\r\n        </div>\r\n        <h3>Spies: <code>createSpyObj</code></h3>\r\n\r\n<p>In order to create a mock with multiple spies, use <code>jasmine.createSpyObj</code> and pass an array of strings. It returns an object that has a property for each string that is a spy.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"Multiple spies, when created manually\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">tape</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">tape</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">createSpyObj</span><span class=\"p\">(</span><span class=\"s1\">'tape'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'play'</span><span class=\"p\">,</span> <span class=\"s1\">'pause'</span><span class=\"p\">,</span> <span class=\"s1\">'stop'</span><span class=\"p\">,</span> <span class=\"s1\">'rewind'</span><span class=\"p\">]);</span>\r\n\r\n    <span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">pause</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">rewind</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"creates spies for each requested function\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">).</span><span class=\"nx\">toBeDefined</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">pause</span><span class=\"p\">).</span><span class=\"nx\">toBeDefined</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">stop</span><span class=\"p\">).</span><span class=\"nx\">toBeDefined</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">rewind</span><span class=\"p\">).</span><span class=\"nx\">toBeDefined</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks that the spies were called\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">pause</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">rewind</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">stop</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"tracks all the arguments of its calls\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">tape</span><span class=\"p\">.</span><span class=\"nx\">rewind</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalledWith</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Matching_Anything_with_&lt;code&gt;jasmine.any&lt;/code&gt;\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Matching_Anything_with_<code>jasmine.any</code>\">¶</a>\r\n        </div>\r\n        <h2>Matching Anything with <code>jasmine.any</code></h2>\r\n\r\n<p><code>jasmine.any</code> takes a constructor or “class” name as an expected value. It returns <code>true</code> if the constructor matches the constructor of the actual value.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"jasmine.any\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"matches any value\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">({}).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">));</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">(</span><span class=\"nb\">Number</span><span class=\"p\">));</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"when used with a spy\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"is useful for comparing arguments\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">createSpy</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">);</span>\r\n      <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n        <span class=\"k\">return</span> <span class=\"kc\">true</span>\r\n      <span class=\"p\">});</span>\r\n\r\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalledWith</span><span class=\"p\">(</span><span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">(</span><span class=\"nb\">Number</span><span class=\"p\">),</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">(</span><span class=\"nb\">Function</span><span class=\"p\">));</span>\r\n    <span class=\"p\">});</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Mocking_the_JavaScript_Clock\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Mocking_the_JavaScript_Clock\">¶</a>\r\n        </div>\r\n        <h2>Mocking the JavaScript Clock</h2>\r\n\r\n<p>The Jasmine Mock Clock is available for a test suites that need the ability to use <code>setTimeout</code> or <code>setInterval</code> callbacks. It makes the timer callbacks synchronous, thus making them easier to test.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"Manually ticking the Jasmine Mock Clock\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">timerCallback</span><span class=\"p\">;</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-20\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-20\">¶</a>\r\n        </div>\r\n        <p>It is installed with a call to <code>jasmine.Clock.useMock</code> in a spec or suite that needs to call the timer functions.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre>  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">timerCallback</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">createSpy</span><span class=\"p\">(</span><span class=\"s1\">'timerCallback'</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">Clock</span><span class=\"p\">.</span><span class=\"nx\">useMock</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-21\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-21\">¶</a>\r\n        </div>\r\n        <p>Calls to any registered callback are triggered when the clock is ticked forward via the <code>jasmine.Clock.tick</code> function, which takes a number of milliseconds.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"causes a timeout to be called synchronously\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">timerCallback</span><span class=\"p\">();</span>\r\n    <span class=\"p\">},</span> <span class=\"mi\">100</span><span class=\"p\">);</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">timerCallback</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n\r\n    <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">Clock</span><span class=\"p\">.</span><span class=\"nx\">tick</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">);</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">timerCallback</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n  <span class=\"p\">});</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"causes an interval to be called synchronously\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">setInterval</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">timerCallback</span><span class=\"p\">();</span>\r\n    <span class=\"p\">},</span> <span class=\"mi\">100</span><span class=\"p\">);</span>\r\n\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">timerCallback</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\r\n\r\n    <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">Clock</span><span class=\"p\">.</span><span class=\"nx\">tick</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">timerCallback</span><span class=\"p\">.</span><span class=\"nx\">callCount</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\r\n\r\n    <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">Clock</span><span class=\"p\">.</span><span class=\"nx\">tick</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">timerCallback</span><span class=\"p\">.</span><span class=\"nx\">callCount</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\r\n\r\n    <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">Clock</span><span class=\"p\">.</span><span class=\"nx\">tick</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">);</span>\r\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">timerCallback</span><span class=\"p\">.</span><span class=\"nx\">callCount</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Asynchronous_Support\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Asynchronous_Support\">¶</a>\r\n        </div>\r\n        <h2>Asynchronous Support</h2>\r\n\r\n<p>Jasmine also has support for running specs that require testing asynchronous operations.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"Asynchronous specs\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">flag</span><span class=\"p\">;</span>\r\n\r\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"should support async execution of test preparation and exepectations\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-23\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-23\">¶</a>\r\n        </div>\r\n        <p>Specs are written by defining a set of blocks with calls to <code>runs</code>, which usually finish with an asynchronous call.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre>    <span class=\"nx\">runs</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\r\n      <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\r\n\r\n      <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n        <span class=\"nx\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\r\n      <span class=\"p\">},</span> <span class=\"mi\">500</span><span class=\"p\">);</span>\r\n    <span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-24\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-24\">¶</a>\r\n        </div>\r\n        <p>The <code>waitsFor</code> block takes a latch function, a failure message, and a timeout.</p>\r\n\r\n<p>The latch function polls until it returns true or the timeout expires, whichever comes first. If the timeout expires, the spec fails with the error message.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre>    <span class=\"nx\">waitsFor</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">value</span><span class=\"o\">++</span><span class=\"p\">;</span>\r\n      <span class=\"k\">return</span> <span class=\"nx\">flag</span><span class=\"p\">;</span>\r\n    <span class=\"p\">},</span> <span class=\"s2\">\"The Value should be incremented\"</span><span class=\"p\">,</span> <span class=\"mi\">750</span><span class=\"p\">);</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-25\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-25\">¶</a>\r\n        </div>\r\n        <p>Once the asynchronous conditions have been met, another <code>runs</code> block defines final test behavior. This is usually expectations based on state after the asynch call returns.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre>    <span class=\"nx\">runs</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">).</span><span class=\"nx\">toBeGreaterThan</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\r\n    <span class=\"p\">});</span>\r\n  <span class=\"p\">});</span>\r\n<span class=\"p\">});</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-The_Runner_and_Reporter\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-The_Runner_and_Reporter\">¶</a>\r\n        </div>\r\n        <h2>The Runner and Reporter</h2>\r\n\r\n<p>Jasmine is built in JavaScript and must be included into a JS environment, such as a web page, in order to run. Like this web page.</p>\r\n\r\n<p>This file is written in JavaScript and is compiled into HTML via <a href=\"http://rtomayko.github.com/rocco/\">Rocco</a>. The JavaScript file is then included, via a <code>&lt;script&gt;</code> tag, so that all of the above specs are evaluated and recorded with Jasmine. Thus Jasmine can run all of these specs. This page is then considered a ‘runner.’</p>\r\n\r\n<p>Scroll down the page to see the results of the above specs. All of the specs should pass.</p>\r\n\r\n<p>Meanwhile, here is how a runner works to execute a Jasmine suite.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">var</span> <span class=\"nx\">jasmineEnv</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">getEnv</span><span class=\"p\">();</span>\r\n  <span class=\"nx\">jasmineEnv</span><span class=\"p\">.</span><span class=\"nx\">updateInterval</span> <span class=\"o\">=</span> <span class=\"mi\">250</span><span class=\"p\">;</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-27\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-27\">¶</a>\r\n        </div>\r\n        <p>Create the <code>HTMLReporter</code>, which Jasmine calls to provide results of each spec and each suite. The Reporter is responsible for presenting results to the user.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre>  <span class=\"kd\">var</span> <span class=\"nx\">htmlReporter</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">HtmlReporter</span><span class=\"p\">();</span>\r\n  <span class=\"nx\">jasmineEnv</span><span class=\"p\">.</span><span class=\"nx\">addReporter</span><span class=\"p\">(</span><span class=\"nx\">htmlReporter</span><span class=\"p\">);</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-28\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-28\">¶</a>\r\n        </div>\r\n        <p>Delegate filtering of specs to the reporter. Allows for clicking on single suites or specs in the results to only run a subset of the suite.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre>  <span class=\"nx\">jasmineEnv</span><span class=\"p\">.</span><span class=\"nx\">specFilter</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">spec</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">return</span> <span class=\"nx\">htmlReporter</span><span class=\"p\">.</span><span class=\"nx\">specFilter</span><span class=\"p\">(</span><span class=\"nx\">spec</span><span class=\"p\">);</span>\r\n  <span class=\"p\">};</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Test_Results\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Test_Results\">¶</a>\r\n        </div>\r\n        <p>Run all of the tests when the page finishes loading – and make sure to run any previous <code>onload</code> handler</p>\r\n\r\n<h3>Test Results</h3>\r\n\r\n<p>Scroll down to see the results of all of these specs.</p>\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre>  <span class=\"kd\">var</span> <span class=\"nx\">currentWindowOnload</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">onload</span><span class=\"p\">;</span>\r\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">currentWindowOnload</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n      <span class=\"nx\">currentWindowOnload</span><span class=\"p\">();</span>\r\n    <span class=\"p\">}</span>\r\n\r\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'.version'</span><span class=\"p\">).</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"nx\">jasmineEnv</span><span class=\"p\">.</span><span class=\"nx\">versionString</span><span class=\"p\">();</span>\r\n    <span class=\"nx\">execJasmine</span><span class=\"p\">();</span>\r\n  <span class=\"p\">};</span>\r\n\r\n  <span class=\"kd\">function</span> <span class=\"nx\">execJasmine</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">jasmineEnv</span><span class=\"p\">.</span><span class=\"nx\">execute</span><span class=\"p\">();</span>\r\n  <span class=\"p\">}</span>\r\n<span class=\"p\">})();</span></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr id=\"section-Downloads\">\r\n      <td class=\"docs\">\r\n        <div class=\"pilwrap\">\r\n          <a class=\"pilcrow\" href=\"http://pivotal.github.com/jasmine/#section-Downloads\">¶</a>\r\n        </div>\r\n        <h2>Downloads</h2>\r\n\r\n<ul>\r\n<li>The <a href=\"http://github.com/pivotal/jasmine/downloads\">Standalone Release</a> is for simple, browser page, or console projects</li>\r\n<li>The <a href=\"http://github.com/pivotal/jasmine-gem\">Jasmine Ruby Gem</a> is for Rails, Ruby, or Ruby-friendly development</li>\r\n<li><a href=\"http://github.com/pivotal/jasmine/wiki\">Other Environments</a> are supported as well</li>\r\n</ul>\r\n\r\n<h2>Support</h2>\r\n\r\n<ul>\r\n<li><a href=\"http://groups.google.com/group/jasmine-js\">Mailing list</a> at Google Groups – a great first stop to ask questions, propose features, or discuss pull requests</li>\r\n<li><a href=\"http://github.com/pivotal/jasmine/issues\">Report Issues</a> at Github</li>\r\n<li>The <a href=\"http://www.pivotaltracker.com/projects/10606\">Backlog</a> lives at <a href=\"http://www.pivotaltracker.com/\">Pivotal Tracker</a></li>\r\n<li>Follow <a href=\"http://twitter.com/jasminebdd\">@JasmineBDD</a> on Twitter</li>\r\n</ul>\r\n\r\n<h2>Thanks</h2>\r\n\r\n<p><em>Running documentation inspired by <a href=\"http://twitter.com/mjackson\">@mjackson</a> and the 2012 <a href=\"http://fluentconf.com/\">Fluent</a> Summit.</em></p>\r\n\r\n      </td>\r\n      <td class=\"code\">\r\n        <div class=\"highlight\">\r\n          <pre></pre>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n</body></html>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}